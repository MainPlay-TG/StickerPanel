import gc
from _lib import *
from traceback import print_exc
MAIN_WIN_SIZE=QSize(800,600)
PACK_BTN_SIZE=QSize(50,50)
STICKER_SIZE=QSize(100,100)
STICKERS_IN_ROW=MAIN_WIN_SIZE.width()//STICKER_SIZE.width()
WINDOW_TITLE="StickerPanel от MainPlay TG"
class App:
  def __init__(self,packs_dir:str):
    self._packs=None
    self.qapp=QApplication(sys.argv)
    self.packs_dir=ms.path.Path(packs_dir)
    self.main_window=MainWindow(self)
    self.notify_label:None|NotifyLabel=None
    self.selected_pack=""
  @property
  def sticker_panel(self):
    return self.main_window.sp
  @property
  def packs(self)->list[Pack]:
    if self._packs is None:
      self._packs=load_stickers(self.packs_dir)
    return self._packs
  def exec(self):
    return self.qapp.exec()
  def render(self):
    self.main_window.repaint()
  def show_notify(self,text:str,time:float=0):
    if self.notify_label is None:
      self.notify_label=NotifyLabel(self.main_window)
      self.notify_label.notify(text,time)
  def hide_notify(self):
    if self.notify_label is None:
      return
    self.notify_label.timer.stop()
    self.notify_label.close()
    self.notify_label=None
class StickerButton(QPushButton):
  IMMEDIATELY_CACHE="--immediately-cache" in sys.argv
  def __init__(self,sticker:Sticker,parent:QWidget):
    QPushButton.__init__(self,parent)
    self.setFixedSize(STICKER_SIZE)
    self.setIcon(sticker.get_qicon(STICKER_SIZE))
    self.setIconSize(STICKER_SIZE)
    self.sticker=sticker
    if self.IMMEDIATELY_CACHE:
      self.sticker.get_cache(TARGET_SIZE)
  def mousePressEvent(self,event:QMouseEvent):
    if event.button()==Qt.MouseButton.RightButton:
      cb=QApplication.clipboard()
      cb.setImage(self.sticker.get_qimage(TARGET_SIZE))
  def mouseMoveEvent(self,event:QMouseEvent):
    drag=QDrag(self)
    mime=QMimeData()
    mime.setImageData(self.sticker.get_qimage(TARGET_SIZE))
    drag.setMimeData(mime)
    drag.setPixmap(self.sticker.get_qpixmap(STICKER_SIZE))
    drag.exec(Qt.DropAction.CopyAction)
class PackButton(QPushButton):
  def __init__(self,pack:Pack,parent:"PackPanel"):
    QPushButton.__init__(self,parent)
    self.app=parent.app
    def on_click(a0):
      if pack.name==self.app.selected_pack:
        return
      self.app.main_window.setWindowTitle(WINDOW_TITLE+" - "+pack.name+" (загрузка)")
      self.app.selected_pack=pack.name
      self.app.show_notify("Загрузка стикеров...")
      self.app.render()
      layout=QGridLayout()
      layout.setContentsMargins(0,0,0,0)
      layout.setSpacing(0)
      panel=QWidget()
      size_x,size_y=STICKERS_IN_ROW,len(pack.stickers)//STICKERS_IN_ROW
      if len(pack.stickers)%STICKERS_IN_ROW>0:
        size_y+=1
      panel.setFixedHeight(STICKER_SIZE.height()*size_y)
      panel.setFixedWidth(STICKER_SIZE.width()*size_x)
      panel.setLayout(layout)
      self.app.sticker_panel.setWidget(panel)
      x,y=0,0
      for sticker in pack.stickers:
        try:
          btn=StickerButton(sticker,panel)
        except Exception:
          log("Failed to create StickerButton for sticker %s",sticker)
          print_exc()
          continue
        if x==size_x:
          x=0
          y+=1
        layout.addWidget(btn,y,x)
        self.app.render()
        x+=1
      self.app.hide_notify()
      gc.collect()
      self.app.main_window.setWindowTitle(WINDOW_TITLE+" - "+pack.name)
    self.clicked.connect(on_click)
    self.setFixedSize(PACK_BTN_SIZE)
    self.setIconSize(PACK_BTN_SIZE)
    self.setIcon(pack.icon.get_qicon(PACK_BTN_SIZE))
class PackPanel(QScrollArea):
  def __init__(self,app:App,parent:QWidget):
    QScrollArea.__init__(self,parent)
    self.app=app
    layout=QGridLayout()
    scroll_bar=QScrollBar(Qt.Orientation.Horizontal,self)
    widget=QWidget()
    layout.setContentsMargins(0,0,0,0)
    layout.setSpacing(0)
    self.setFixedSize(MAIN_WIN_SIZE.width(),PACK_BTN_SIZE.height()+scroll_bar.size().height())
    self.setHorizontalScrollBar(scroll_bar)
    self.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
    self.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
    self.setWidget(widget)
    self.setWidgetResizable(True)
    widget.setFixedSize(QSize(PACK_BTN_SIZE.width()*len(app.packs),PACK_BTN_SIZE.height()))
    widget.setLayout(layout)
    column=0
    for pack in app.packs:
      try:
        btn=PackButton(pack,self)
      except Exception:
        log("Failed to create PackButton for pack %s",pack)
        print_exc()
        continue
      layout.addWidget(btn,0,column)
      column+=1
class StickerPanel(QScrollArea):
  def __init__(self,parent:"MainWindow"):
    QScrollArea.__init__(self,parent)
    self.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
    self.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
    self.setWidgetResizable(True)
class NotifyLabel(QLabel):
  def __init__(self,parent:"MainWindow"):
    QLabel.__init__(self,parent)
    self.timer=QTimer(self)
  def notify(self,text:str,time:float=3):
    parent:MainWindow=self.parent()
    self.setText(text)
    self.setAlignment(Qt.AlignmentFlag.AlignCenter)
    self.setFont(QFont("Arial",18))
    self.setStyleSheet("background-color:rgba(255,255,255,120);color:black;")
    self.resize(self.sizeHint())
    self.move((parent.width()-self.width())//2,(parent.height()-self.height())//2)
    self.show()
    if time>0:
      self.timer.singleShot(time*1000,self.hide)
  def mousePressEvent(self,event:QMouseEvent):
    self.parent().app.hide_notify()
class MainWindow(QMainWindow):
  def __init__(self,app:App):
    QMainWindow.__init__(self)
    app.main_window=self
    self.app=app
    self.setFixedSize(MAIN_WIN_SIZE)
    self.setWindowTitle(WINDOW_TITLE)
    self.show()
    self.sp=StickerPanel(self)
    cw=QWidget(self)
    self.setCentralWidget(cw)
    layout=QGridLayout(self)
    cw.setLayout(layout)
    layout.setContentsMargins(0,0,0,0)
    layout.setSpacing(0)
    layout.addWidget(PackPanel(app,self),0,0)
    layout.addWidget(app.sticker_panel,1,0)
@ms.utils.main_func(__name__)
def main():
  if "--clear-cache" in sys.argv:
    log("Deleting cache...")
    for i in ms.dir.list_iter(CACHE_DIR):
      i.delete()
  app=App(cfg["stickers.dir"])
  return app.exec()
